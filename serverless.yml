service: test-task-perfsys
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  iamRoleStatements:
    - Effect: Allow
      Action: logs:CreateLogGroup
      Resource: "arn:aws:logs:eu-central-1:938668680897:*"
    - Effect: Allow
      Action:
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - "arn:aws:logs:eu-central-1:938668680897:log-group:/aws/lambda/createFile:*"
        - "arn:aws:logs:eu-central-1:938668680897:log-group:/aws/lambda/processFile:*"
    - Effect: Allow
      Action: dynamodb:PutItem
      Resource: "arn:aws:dynamodb:eu-central-1:938668680897:table/files-table"
    - Effect: Allow
      Action: textract:DetectDocumentText
      Resource: "*"
    - Effect: Allow
      Action: s3:GetObject
      Resource:
        - "arn:aws:s3:::perfsysstorage/*"
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: "arn:aws:dynamodb:eu-central-1:938668680897:table/files-table"



# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**

functions:
  createFileLambda:
    handler: create_file.lambda_handler

  ProcessFileLambda:
    handler: process_file.lambda_handler
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
