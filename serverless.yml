service: test-task-perfsys
frameworkVersion: '3'
custom:
  accountId: 938668680897
  region: "eu-central-1"
  dynamodb_table: "files-table"
  bucket_name: "perfsys-storage-dev-bucket"

plugins:
  - serverless-python-requirements


provider:
  name: aws
  runtime: python3.11
  region: ${self:custom.region}
  stage: dev
  deploymentPrefix: perfsys
  iamRoleStatements:
    - Effect: Allow
      Action: logs:CreateLogGroup
      Resource: "arn:aws:logs:${self:custom.region}:${self:custom.accountId}:*"
    - Effect: Allow
      Action:
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - "arn:aws:logs:${self:custom.region}:${self:custom.accountId}:log-group:/aws/lambda/CreateFileLambda:*"
        - "arn:aws:logs:${self:custom.region}:${self:custom.accountId}:log-group:/aws/lambda/ProcessFileLambda:*"
        - "arn:aws:logs:${self:custom.region}:${self:custom.accountId}:log-group:/aws/lambda/MakeCallbackLambda:*"
        - "arn:aws:logs:${self:custom.region}:${self:custom.accountId}:log-group:/aws/lambda/GetFileLambda:*"
    - Effect: Allow
      Action: textract:DetectDocumentText
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObjectAcl
      Resource:
        - "arn:aws:s3:::${self:custom.bucket_name}/*"
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: "arn:aws:dynamodb:${self:custom.region}:${self:custom.accountId}:table/${self:custom.dynamodb_table}"
    # Add the provided policy for MakeCallbackLambda
    - Effect: Allow
      Action:
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource:
        - "arn:aws:logs:${self:custom.region}:${self:custom.accountId}:*"
        - "arn:aws:dynamodb:${self:custom.region}:${self:custom.accountId}:table/${self:custom.dynamodb_table}/stream/*"

functions:
  createFileLambda:
    handler: create_file/lambda_handler.handle
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.dynamodb_table}
      BUCKET_NAME: ${self:custom.bucket_name}
      REGION_NAME: ${self:custom.region}
    events:
      - http:
          path: files
          method: post

  ProcessFileLambda:
    handler: process_file/lambda_handler.handle
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.dynamodb_table}
      REGION_NAME: ${self:custom.region}
    events: # Add an S3 event trigger
      - s3:
          bucket: ${self:custom.bucket_name}
          event: s3:ObjectCreated:*

  MakeCallbackLambda:
    handler: make_callback/lambda_handler.handle
#    events: # Add a DynamoDB event trigger
#      - stream:
#          type: dynamodb
#          arn: "arn:aws:dynamodb:${self:custom.region}:${self:custom.accountId}:table/${self:custom.dynamodb_table}/stream/*"
  GetFileLambda:
     handler: get_file/lambda_handler.handle
     environment:
       DYNAMODB_TABLE_NAME: ${self:custom.dynamodb_table}
     events:
       - http:
           path: files/{fileid}
           method: get
           request:
             parameters:
               paths:
                 fileid: true
