service: test-task-perfsys
frameworkVersion: '3'
custom:
  accountId: 938668680897
  region: ${self:custom.region}

provider:
  name: aws
  runtime: python3.11
  region: ${self:custom.region}
  stage: dev
  deploymentPrefix: perfsys
  iamRoleStatements:
    - Effect: Allow
      Action: logs:CreateLogGroup
      Resource: "arn:aws:logs:${self:custom.region}:${self:custom.accountId}:*"
    - Effect: Allow
      Action:
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - "arn:aws:logs:${self:custom.region}:${self:custom.accountId}:log-group:/aws/lambda/CreateFileLambda:*"
        - "arn:aws:logs:${self:custom.region}:${self:custom.accountId}:log-group:/aws/lambda/ProcessFileLambda:*"
        - "arn:aws:logs:${self:custom.region}:${self:custom.accountId}:log-group:/aws/lambda/MakeCallbackLambda:*"
    - Effect: Allow
      Action: textract:DetectDocumentText
      Resource: "arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:test-task-perfsys-${self:provider.stage}-ProcessFileLambda"
    - Effect: Allow
      Action: s3:GetObject
      Resource:
        - "arn:aws:s3:::perfsys-storage-dev-bucket/*"
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: "arn:aws:dynamodb:${self:custom.region}:${self:custom.accountId}:table/files-table"
    # Add the provided policy for MakeCallbackLambda
    - Effect: Allow
      Action: dynamodb:GetRecords
      Resource:
        - "arn:aws:logs:${self:custom.region}:${self:custom.accountId}:*"
        - "arn:aws:logs:${self:custom.region}:${self:custom.accountId}:log-group:/aws/lambda/MakeCallbackLambda:*"
        - "arn:aws:dynamodb:${self:custom.region}:${self:custom.accountId}:table/files-table/stream/*"


functions:
  createFileLambda:
    handler: create_file/lambda_handler.handle
    environment:
      DYNAMODB_TABLE_NAME: "files-table"
      BUCKET_NAME: "perfsys-storage-dev-bucket"
      REGION_NAME: "${self:custom.region}"
    events:
      - http:
          path: files
          method: post

  ProcessFileLambda:
    handler: process_file/lambda_handler.handle
    environment:
      DYNAMODB_TABLE_NAME: "files-table"
      REGION_NAME: "${self:custom.region}"
    events: # Add an S3 event trigger
      - s3:
          bucket: perfsys-storage-dev-bucket
          event: s3:ObjectCreated:*

  MakeCallbackLambda:
    handler: make_callback/lambda_handler.handle
#    events: # Add a DynamoDB event trigger
#      - stream:
#          type: dynamodb
#          arn: arn:aws:dynamodb:${self:custom.region}:${self:custom.accountId}:table/files-table/stream/*

resources:
  Resources:
    ProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ParentId:
          Fn::GetAtt:
            - "ApiGatewayRestApi"
            - "RootResourceId"
        PathPart: "getfiles"
    ProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: "GET"
        ResourceId:
          Ref: ProxyResource
        RestApiId:
          Ref: ApiGatewayRestApi
        AuthorizationType: "NONE"  # Set to "NONE" for public access
        Integration:
          Type: HTTP
          IntegrationHttpMethod: GET
          Uri: "https://perfsys-storage-dev-bucket.s3.amazonaws.com/{file_id}"
          IntegrationResponses:
            - StatusCode: 200


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:${self:custom.region}:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello






# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
